------------------------------------------------------------------------------
--                                                                          --
--                         REFLEX COMPILER COMPONENTS                       --
--                                                                          --
--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --
--                                                                          --
-- Reflex is free software; you can redistribute it  and/or modify it under --
-- terms of the  GNU General Public License as published  by the Free Soft- --
-- ware Foundation; either version 3, or (at your option) any later version --
-- Reflex is distributed in the hope that it will be useful, but WITH-      --
-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --
-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --
-- for  more details.  You should have  received  a copy of the GNU General --
-- Public License distributed with Reflex; see file COPYING3. If not, go to --
-- http://www.gnu.org/licenses for a complete copy of the license.          --
--                                                                          --
-- Reflex is originally developed  by the Artics team at Grenoble.          --
--                                                                          --
------------------------------------------------------------------------------

with Ada.Text_Io; use Ada.Text_IO;

with Sem_Util; use Sem_Util;
with Nlists;   use Nlists;
with Atree;    use Atree;
with Errout;   use Errout;
with Einfo;    use Einfo;
with Sinfo;    use Sinfo;
with Namet;    use Namet;
with Types;    use Types;

with Artics.Buffers; use Artics.Buffers;
with Artics.Maths;

with Reflex.Infos; use Reflex.Infos;
with Reflex.Gen.Types; use Reflex.Gen.Types;
with Reflex.Gen.Outputs; use Reflex.Gen.Outputs;
with Reflex.Gen.Utils; use Reflex.Gen.Utils;
with Unity.Gen.Ch2; use Unity.Gen.Ch2;
with Unity.Gen.Ch3; use Unity.Gen.Ch3;

with Reflex.Global_Arecs; use Reflex.Global_Arecs;

-- Ladder dirs
with Reflex.Boxes.Builders; use Reflex.Boxes.Builders;
with Reflex.Ladder.Rungs; use Reflex.Ladder.Rungs;
with Reflex.Boxes; use Reflex.Boxes;
with Reflex.Boxes.Ladder_Emitor; use Reflex.Boxes.Ladder_Emitor;
with Reflex.Boxes.Dispatch_Ladder_Emitor; use Reflex.Boxes.Dispatch_Ladder_Emitor;
--  Fbd dirs
with Artics.Graph.Graphs; use Artics.Graph.Graphs;
with Artics.Graph.Models; use Artics.Graph.Models;
with Artics.Graph.Cells;  use Artics.Graph.Cells;

with Reflex.Fbd_Dispatch_Emitor; use Reflex.Fbd_Dispatch_Emitor;
with Reflex.Fbd_Placements;      use Reflex.Fbd_Placements;
with Reflex.Fbd_Builders;        use Reflex.Fbd_Builders;
with Reflex.Fbd_Emitor; use Reflex.Fbd_Emitor;
with Artics.Namet;
with Artics.Graph.Names;

package body Unity.Gen.Ch6 is
   
   ----------------------------------------------
   -- Generate_Abstract_Subprogram_Declaration --
   ----------------------------------------------
   
   procedure Generate_Abstract_Subprogram_Declaration 
     (This : access Unity_Generator_Record;
      Node : Node_Id) is
   begin
      null;
   end Generate_Abstract_Subprogram_Declaration;
   
   ------------------------
   -- Generate_Body_Stub --
   ------------------------
   
   procedure Generate_Body_Stub 
     (This : access Unity_Generator_Record;
      Node : Node_Id) is
   begin
      null;
   end Generate_Body_Stub;
   
   ---------------------------------------
   -- Generate_Defining_Operator_Symbol --
   ---------------------------------------
   
   procedure Generate_Defining_Operator_Symbol 
     (This : access Unity_Generator_Record;
      Node : Node_Id) is
   begin
      null;
   end Generate_Defining_Operator_Symbol;
   
   -----------------------------------------
   -- Generate_Defining_Program_Unit_Name --
   -----------------------------------------
   
   procedure Generate_Defining_Program_Unit_Name 
     (This : access Unity_Generator_Record;
      Node : Node_Id) is
   begin
      null;
   end Generate_Defining_Program_Unit_Name;
   
   -------------------------
   -- Generate_Designator --
   -------------------------
   
   procedure Generate_Designator 
     (This : access Unity_Generator_Record;
      Node : Node_Id) is
   begin
      null;
   end Generate_Designator;
   
   ----------------------------------------
   -- Generate_Extended_Return_Statement --
   ----------------------------------------
   
   procedure Generate_Extended_Return_Statement 
     (This : access Unity_Generator_Record;
      Node : Node_Id) is
   begin
      null;
   end Generate_Extended_Return_Statement;
   
   -------------------------------------
   -- Generate_Function_Instantiation --
   -------------------------------------
   
   procedure Generate_Function_Instantiation 
     (This : access Unity_Generator_Record;
      Node : Node_Id) is
   begin
      null;
   end Generate_Function_Instantiation;
   
   -------------------------------------
   -- Generate_Function_Specification --
   -------------------------------------
   
   procedure Generate_Function_Specification 
     (This : access Unity_Generator_Record;
      Node : Node_Id) is
   begin
      null;
   end Generate_Function_Specification;
   
   ------------------------------
   -- Generate_Operator_Symbol --
   ------------------------------
   
   procedure Generate_Operator_Symbol 
     (This : access Unity_Generator_Record;
      Node : Node_Id) is
   begin
      null;
   end Generate_Operator_Symbol;
   
   ------------------------------------
   -- Generate_Parameter_Association --
   ------------------------------------
   
   procedure Generate_Parameter_Association 
     (This : access Unity_Generator_Record;
      Node : Node_Id) is
   begin
      null;
   end Generate_Parameter_Association;
   
   ------------------------------------
   -- Generate_Parameter_Declaration --
   ------------------------------------

   procedure Generate_Parameter_Declaration
     (This : access Unity_Generator_Record;
      Node : Node_Id) is
      
      Ob           : Output_Buffer := This.Get_Output_Buffer;
      Formal       : Entity_Id := Node; --  Defining_Identifier (Node);
      Param_Type   : Entity_Id;
      Par          : Node_Id;
      Type_Def     : Node_Id;
   begin
      ----------------------------------
      -- 6.1  Parameter Specification --
      ----------------------------------

      --  PARAMETER_SPECIFICATION ::=
      --    DEFINING_IDENTIFIER_LIST : [ALIASED] MODE [NULL_EXCLUSION]
      --      SUBTYPE_MARK [:= DEFAULT_EXPRESSION]
      --  | DEFINING_IDENTIFIER_LIST : ACCESS_DEFINITION
      --      [:= DEFAULT_EXPRESSION]
      
      Write_Indent_Str (Ob, "<variables name=""");
      Write_Id (Ob, Formal);
      
      Write_Str (Ob, """ typeName=""");
      Param_Type := Etype (Formal);
      
      Par := Parent (Formal);
      Type_Def := Parameter_Type (Par);
      if Nkind (Type_Def) = N_Access_Definition then
	 Param_Type := Subtype_Mark (Type_Def);
         Write_Str (Ob, "REF_TO ");
	 Generate_Type_Name (This, Param_Type);
      else
	 pragma Assert (Nkind_In (Type_Def, N_Identifier, N_Expanded_Name));
	 Handle_Anonymous_Type (This, Param_Type);
      end if;	       
	       
      Write_Str (Ob, """>");
      Write_Eol (Ob);
      
      Indent_Begin (Ob);
      Write_Indent_Str (Ob, "<attribute name=""PositionPin"" value=""");
      Write_Int (Ob, Integer (Get_Pin_Position (Formal)));
      Write_Str (Ob, """></attribute>");
      Indent_End (Ob);
      Write_Eol (Ob);
      Write_Indent_Str (Ob, "</variables>");
      Write_Eol (Ob);
      
      --  Generate Expression if it is static.
   end Generate_Parameter_Declaration;
   
   --------------------------------------
   -- Generate_Parameter_Specification --
   --------------------------------------
   
   procedure Generate_Parameter_Specification 
     (This : access Unity_Generator_Record;
      Node : Node_Id) is
      
      Ob           : Output_Buffer := This.Get_Output_Buffer;
      Subp_Id      : Entity_Id     := Unique_Defining_Entity (Node);
      Formal       : Node_Id;
      Count_In     : Natural;
      Count_Out    : Natural;
      Count_In_Out : Natural;
   begin
      --  Compute the Pin Position of the formals
      
      Count_In     := 0;
      Count_Out    := 0;
      Count_In_Out := 0;
      
      Formal := First_Formal_With_Extras (Subp_Id);
      while Present (Formal) loop
	 if Ekind (Formal) = E_In_Parameter then
	    Count_In :=  Artics.Maths.Max(Count_In , Count_In_Out) + 1;
	    Set_Pin_Position (Formal, Count_In);
	    
	 elsif Ekind (Formal) = E_In_Out_Parameter then
	    Count_In_Out := Artics.Maths.Max(Count_In , Count_In_Out);
	    Count_In_Out := Artics.Maths.Max(Count_Out , Count_In_Out) + 1;
            Set_Pin_Position (Formal, Count_In_Out);
	    
         elsif Ekind (Formal) = E_Out_Parameter then
            Count_Out := Artics.Maths.Max(Count_Out , Count_In_Out) + 1;
            Set_Pin_Position (Formal, Count_Out);
	    
            -- Never arise
         else
            raise Program_Error;
         end if;
	 
         Next_Formal_With_Extras (Formal);
      end loop;
      
      
      --  First emit the in parameters
      
      Formal := First_Formal_With_Extras (Subp_Id);
      if Present (Formal) then
	 
         Write_Indent_Str (Ob, "<inputParameters>");
         Write_Eol (Ob);
         Indent_Begin (Ob);
	 
         while Present (Formal) loop
	    
            if Ekind (Formal) = E_In_Parameter then
               Generate_Parameter_Declaration (This, Formal);
            end if;
	    
            Next_Formal_With_Extras (Formal);
         end loop;
	 
         Indent_End (Ob);
         Write_Indent_Str (Ob, "</inputParameters>");
         Write_Eol (Ob);
      end if;
      
      --  Second emit the in out parameters
      
      Formal := First_Formal_With_Extras (Subp_Id);
      if Present (Formal) then
	 
         Write_Indent_Str (Ob, "<inOutParameters>");
         Write_Eol (Ob);
         Indent_Begin (Ob);
	 
         while Present (Formal) loop
	    
            if Ekind (Formal) = E_In_Out_Parameter then
               Generate_Parameter_Declaration (This, Formal);
            end if;
	    
            Next_Formal_With_Extras (Formal);
         end loop;
	 
         Indent_End (Ob);
         Write_Indent_Str (Ob, "</inOutParameters>");
         Write_Eol (Ob);
      end if;
      
      --  Finaly emit the out parameters
      
      Formal := First_Formal_With_Extras (Subp_Id);
      if Present (Formal) then
	 
         Write_Indent_Str (Ob, "<outputParameters>");
         Write_Eol (Ob);
         Indent_Begin (Ob);
	 
         while Present (Formal) loop
	    
            if Ekind (Formal) = E_Out_Parameter then
               Generate_Parameter_Declaration (This, Formal);
            end if;
	    
            Next_Formal_With_Extras (Formal);
         end loop;
	 
         Indent_End (Ob);
         Write_Indent_Str (Ob, "</outputParameters>");
         Write_Eol (Ob);
      end if;
      
   end Generate_Parameter_Specification;
   
   --------------------------------------
   -- Generate_Procedure_Instantiation --
   --------------------------------------
   
   procedure Generate_Procedure_Instantiation 
     (This : access Unity_Generator_Record;
      Node : Node_Id) is
   begin
      null;
   end Generate_Procedure_Instantiation;
   
   --------------------------------------
   -- Generate_Procedure_Specification --
   --------------------------------------
   
   procedure Generate_Procedure_Specification 
     (This : access Unity_Generator_Record;
      Node : Node_Id) is
   begin
      null;
   end Generate_Procedure_Specification;
   
   --------------------------------------
   -- Generate_Simple_Return_Statement --
   --------------------------------------
   
   procedure Generate_Simple_Return_Statement 
     (This : access Unity_Generator_Record;
      Node : Node_Id) is
   begin
      null;
   end Generate_Simple_Return_Statement;
   
   ---------------------------------------
   -- Generate_Subprogram_Specification --
   ---------------------------------------
   
   procedure Generate_Subprogram_Specification
     (This : access Unity_Generator_Record;
      Node : Node_Id) is
      
      Def_Id      : Node_Id;
      Params_Spec : List_Id;
   begin
      Def_Id := Unique_Defining_Entity (Node);
      
      --  Declare Instance
      
      Params_Spec := Parameter_Specifications (Node);
      Generate_Parameter_Specification (This, Node);	 
   end Generate_Subprogram_Specification;
   
   ------------------------------
   -- Generate_Subprogram_Body --
   ------------------------------
   
   procedure Generate_Subprogram_Body 
     (This : access Unity_Generator_Record;
      Node : Node_Id) is
      
      Previous_Ob : Output_Buffer;
      Ob          : Output_Buffer;
      Spec        : Node_Id;
      Decls       : List_Id;
      N           : Node_Id;
      Def_Id      : Entity_Id;
      Lang        : Language_Type;
      Tmp         : Output_Buffer;
      Called_List : Called_Assoc_Lists.List;
      Called_Arec : access Global_Arec_Record;
      Gen_Type    : Generation_Type;
   begin
      Put_Line ("Generate_Subprogram_Body begin ");
      Def_Id := Unique_Defining_Entity (Node);
      
      Put_Line ("Generate_Subprogram_Body begin " & 
		  Get_String (Chars (Def_Id)));
      
      -- Write_Comment_Line_To_Node (Generator_Ptr (This), Node);
      
      This.Open_Scope (Def_Id);
      
      Previous_Ob := This.Get_Output_Buffer;
      
      This.Set_Current_Entity (Def_Id);
      
      This.Set_Output_Buffer (This.Get_Current_Statments_Buffer);
      Ob := This.Get_Output_Buffer;
      
      Gen_Type := Get_Generation_Type (Def_Id);
      
      -- Gen_Type := Sr_Type;
      Gen_Type := Fb_Type;
      if Gen_Type = Section_Type then
	 null;
	 
      elsif Gen_Type = Sr_Type then
	 Write_Indent_Str (Ob, "<program>");
	 Write_Eol (Ob);
	 Indent_Begin (Ob);
	 
	 Write_Indent_Str
	   (Ob, "<identProgram name=""");
	 Write_Id (Ob, Def_Id);
	 Write_Str (Ob, """ type=""SR"" task=""MAST""></identProgram>");
	 Write_Eol (Ob);
	 Indent_Begin (Ob);
	      
      else
	 Put_Line ("Generate FB");
	 Write_Indent_Str (Ob, "<FBSource nameOfFBType=""");
	 Write_Id (Ob, Def_Id);
	 Write_Str
	   (Ob, """ version=""0.05"" dateTime=""dt#2017-01-24-08:42:23"">");
	 Write_Eol (Ob);
	 Indent_Begin (Ob);
	 
	 Spec := Specification (Node);
	 Generate_Subprogram_Specification (This, Spec);
	 
	 --  First of all declare types and constants at the library level
	 
	 Decls := Declarations (Node);
	 if Is_Non_Empty_List (Decls) then
	    Write_Indent_Str (Ob, "<publicLocalVariables>");
	    Write_Eol (Ob);
	    Indent_Begin (Ob);
	    
	    N := First (Decls);
	    while Present (N) loop
	       Generate_Node (This, N);
	       Next (N);
	    end loop;
	    
	    Indent_End (Ob);
	    Write_Indent_Str (Ob, "</publicLocalVariables>");
	    Write_Eol (Ob);
	 end if;
	 
	 --  Declare Local DFB Instances 
	 
	 Called_Arec := Get_Subprogram_Global_Arec (Def_Id);
	 Called_List := Get_Called_List (Def_Id);
	 if not Called_Assoc_Lists.Is_Empty (Called_List) then
	    Write_Indent_Str (Ob, "<privateLocalVariables>");
	    Write_Eol (Ob);
	    Indent_Begin (Ob);
	    
	    
	    for Called of Called_List loop
	       Write_Indent_STr (Ob, "<variables name=""");
	       Write_Name (Ob, Called.Instance_Name);
	       Write_Str (Ob, """ typeName=""");
	       Write_Id (Ob, Called.Entity);
	       Write_Str (Ob, """></variables>");
	       Write_Eol (Ob);
	    end loop;
	    
	    Indent_End (Ob);
	    Write_Indent_Str (Ob, "</privateLocalVariables>");
	    Write_Eol (Ob);
	 end if;
	 
	 Write_Indent_Str (Ob, "<FBProgram name=""Cyclic"">");
	 Write_Eol (Ob);
	 --  Indent_Begin (Ob);
      end if;
      
      Lang := Get_Language (Def_Id);
      --        Lang := Ladder_Language;
      --        Lang := Flow_Language;
      --  Lang := Literal_Language;
      Put_Line ("============ Lang " & Lang'Img);
      case Lang is
      when Literal_Language
         | Unknown_Language =>
         Write_Indent_Str (Ob, "<STSource>");
         Write_Eol (Ob);
	 
	 Put_Line ("last Line Printed " & Last_Line_Printed'Img);
	 Put_Line ("Sloc (Node)       " & Sloc (Node)'Img);
	 Write_Comment_Line_To_Node (Generator_Ptr (This), Node);
	 
         Indent_End (Ob);
	    
         Tmp := This.Get_Tmp_Prog_Output_Buffer;
         Reset_Buffer (Tmp);
         This.Set_Output_Buffer (Tmp);
         Generate_Node (This, Handled_Statement_Sequence (Node));
         Write_Str (Ob, To_Xml (Buffer_To_String (Tmp)));
         This.Set_Output_Buffer (Ob);
	    
         Indent_Begin (Ob);
	    
         Write_Indent_Str (Ob, "</STSource>");
         Write_Eol (Ob);
	 
      when Ladder_Language =>
	   
         declare
            Builder : access Builder_Record;
         begin
            Builder := New_Builder;
            Builder.Set_Literal_Generator (This);
            --  This.Set_Output_Buffer (Builder.Get_Literal_Buffer);
            Builder.Build_Boxes (Node);
	       
            --  Absolute Placement
            declare
               Blist : Boxes_Lists.List;
            begin
               Blist := Builder.Get_Subp_Boxes;
               for B of Blist loop
                  B.Absolute_Place_Box;
               end loop;
		  
               Put_Line ("========================");
               Put_Line ("     Matrices ");
               Put_Line ("========================");
		  
               Builder.Build_Rungs;
		  
               --  Build matrices
		  
               Put_Line ("");
               Put_Line ("------------------------------------");
               Builder.Generate_Rungs;
	       
	       declare
		  Ld : access Ladder_Emitor_Record := Builder.Get_Ladder_Emitor;
		  S  : String := Buffer_To_String (Ld.Get_Output_Buffer);
	       begin
		  Write_Str (Ob, S);
		  Write_To_Text_File (Ld.Get_Output_Buffer, "ladder.lad");
	       end;    
	       
	       -- Append_Buffer (Ld.Get_Output_Buffer, Ob);
            end;
         end;
	    
      when Flow_Language =>
         ----------------------------------/!\------------------------------
	 -------------------------INIT FOR GRAPH ---------------------------
         --  Artics.Namet.Initialize;
         --  Artics.Graph.Names.Initialize;
         ----------------------------------/!\-----------------------------
         --------------------------INIT FOR GRAPH -------------------------
    
         declare 
            Builder : access Fbd_Builder_Record;
	    Emitor  : access Fbd_Emitor_Record;
         begin
            Builder := New_Builder;
            Builder.Set_Subp (Node);
            
            Build_Fbd (Builder, Node);
            
            Place_Graph (Builder);
            
            Emitor_Dispatch (Builder);
	    
	    Emitor := Builder.Get_Fbd_Emitor;
	    
	    --  Append_Buffer (Emitor.Get_Output_Buffer, Ob);
	    Write_To_Text_File (Emitor.Get_Output_Buffer, "flow.fbd");
            
            declare
               S : String := Buffer_To_String (Emitor.Get_Output_Buffer);
            begin
               Write_Str (Ob, S);
            end;    
         end;
	 
	 when Chart_Language =>
         Write_Indent_Str (Ob, "<STSource>");
         Write_Eol (Ob);
	    
         Indent_End (Ob);
	    
         Tmp := This.Get_Tmp_Prog_Output_Buffer;
         Reset_Buffer (Tmp);
         This.Set_Output_Buffer (Tmp);
         Generate_Node (This, Handled_Statement_Sequence (Node));
         Write_Str (Ob, To_Xml (Buffer_To_String (Tmp)));
         This.Set_Output_Buffer (Ob);
	    
         This.Set_Output_Buffer (Ob);
         Indent_Begin (Ob);
	    
         Write_Indent_Str (Ob, "</STSource>");
         Write_Eol (Ob);
      end case;

      if Gen_Type = Section_Type then
	 null;
	 
      elsif Gen_Type = Sr_Type then
         Indent_End (Ob);
	 Write_Indent_Str (Ob, "</program>");
	 Write_Eol (Ob);
         Indent_End (Ob);
	 
      else
	 --  Indent_End (Ob);
	 Write_Indent_Str (Ob, "</FBProgram>");
	 Write_Eol (Ob);
	 
	 Indent_End (Ob);
	 Write_Indent_Str (Ob, "</FBSource>");
	 Write_Eol (Ob);
      end if;
      
      This.Set_Current_Entity (Empty);
	 
      This.Close_Scope;
      
      --  Declare Instance
      
      --  Inst := Get_Subprogram_Instance (Def_Id);
      --  if Present (Inst) then
      --  	 Declare_Subprogram_Instance (This, Def_ID, Inst);
      --  end if;
   exception
      when others =>
	 Put_Line ("Generate_Subprogram_Body =====> exception");
   end Generate_Subprogram_Body;
   
   -------------------------------------
   -- Generate_Subprogram_Declaration --
   -------------------------------------
   
   procedure Generate_Subprogram_Declaration 
     (This : access Unity_Generator_Record;
      Node : Node_Id) is
      
      Ob        : Output_Buffer := This.Get_Output_Buffer;
      Spec      : Node_Id;
      Body_Id   : Node_Id;
      --  Subp_Body : Node_Id;
   begin
      Spec    := Specification (Node);
      Body_Id := Corresponding_Body (Node);
      
      -- Generate_Subprogram_Specification (Spec);
      
      --  if Present (Body_Id) then
      --  	 Put_Line (" Corresponding Body Id " & Nkind (Body_Id)'Img);
      --  	 Subp_Body := Parent (Body_Id);
      --  	 if Nkind (Subp_Body) = N_Defining_Program_Unit_Name then
      --  	    Subp_Body := Parent (Subp_Body);
      --  	 end if;
      --  	 Subp_Body := Parent (Subp_Body);
      --  	 Put_Line (" Corresponding Body " & Nkind (Subp_Body)'Img);
      --  	 Generate_Subprogram_Body (Subp_Body);
      --  else
      --  	 Write_Str (";");
      --  	 Write_Eol;
      --  end if;
      --  Write_Eol;
   end Generate_Subprogram_Declaration;
   
   ----------------------------------------------
   -- Generate_Subprogram_Renaming_Declaration --
   ----------------------------------------------
   
   procedure Generate_Subprogram_Renaming_Declaration 
     (This : access Unity_Generator_Record;
      Node : Node_Id) is
   begin
      null;
   end Generate_Subprogram_Renaming_Declaration;
   
   ----------------------------------
   -- Generate_Subtype_Declaration --
   ----------------------------------
   
   procedure Generate_Subtype_Declaration 
     (This : access Unity_Generator_Record;
      Node : Node_Id) is
   begin
      null;
   end Generate_Subtype_Declaration;
   
   ----------------------
   -- Generate_Subunit --
   ----------------------
   
   procedure Generate_Subunit 
     (This : access Unity_Generator_Record;
      Node : Node_Id) is
   begin
      null;
   end Generate_Subunit;

   ---------------------------------
   -- Declare_Subprogram_Instance --
   ---------------------------------
   
   procedure Declare_Subprogram_Instance
     (This   : access Unity_Generator_Record;
      Def_Id : Entity_Id;
      Inst   : Entity_Id) is
      
      Ob : Output_Buffer := This.Get_Vars_Output_Buffer;
   begin
      Write_Indent_Str (Ob, "<variables ");
      Write_Str (Ob, "name=""");
      Write_Id (Ob,  Inst);
      Write_Str (Ob,""" typeName=""");
      Write_Id (Ob,  Def_Id);
      Write_Str (Ob, """>");
      Write_Str (Ob, "</variables>");
      Write_Eol (Ob);
   end Declare_Subprogram_Instance;

end Unity.Gen.Ch6;
