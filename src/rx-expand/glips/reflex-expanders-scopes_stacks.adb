------------------------------------------------------------------------------
--                                                                          --
--                         REFLEX COMPILER COMPONENTS                       --
--                                                                          --
--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --
--                                                                          --
-- Reflex is free software; you can redistribute it  and/or modify it under --
-- terms of the  GNU General Public License as published  by the Free Soft- --
-- ware Foundation; either version 3, or (at your option) any later version --
-- Reflex is distributed in the hope that it will be useful, but WITH-      --
-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --
-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --
-- for  more details.  You should have  received  a copy of the GNU General --
-- Public License distributed with Reflex; see file COPYING3. If not, go to --
-- http://www.gnu.org/licenses for a complete copy of the license.          --
--                                                                          --
-- Reflex is originally developed  by the Artics team at Grenoble.          --
--                                                                          --
------------------------------------------------------------------------------

with Opt; use Opt;
with Table;
with System.HTable; use System.HTable;

package body Reflex.Expanders.Scopes_Stacks is
   
   type Scope_Stack_Entry is record
      Extra_Scope_Id : Nat;
      --  For extra output

      In_Declarations : Boolean;
      --  True when we are processing declarations of this scope

      Is_Extra_Scope : Boolean;
      --  True when this scope was not generated by the front end
      
      Declarative_Entity : Entity_Id;
   end record;

   package Scope_Stack is new Table.Table
     (Table_Component_Type => Scope_Stack_Entry,
      Table_Index_Type     => Nat,
      Table_Low_Bound      => 1,
      Table_Initial        => 128,
      Table_Increment      => 100,
      Table_Name           => "Glips.Scope_Stack");

   -----------------
   -- Close_Scope --
   -----------------

   procedure Close_Scope is
   begin
      --  Exit from all the extra scopes

      while Scope_Stack.Table (Scope_Stack.Last).Is_Extra_Scope loop
	 Scope_Stack.Decrement_Last;
      end loop;

      --  And finally exit from the current scope

      Scope_Stack.Decrement_Last;
   end Close_Scope;

   -----------------
   -- Close_Scope --
   -----------------

   procedure Close_Scope (Scop_Id : Nat) is
   begin
      loop
	 Close_Scope;
	 exit when Scope_Stack.Last < Scop_Id;
      end loop;
   end Close_Scope;

   ----------------------
   -- Current_Scope_Id --
   ----------------------

   function Current_Scope_Id return Nat is
   begin
      return Scope_Stack.Last;
   end Current_Scope_Id;

   ---------------------
   -- In_Declarations --
   ---------------------

   function In_Declarations return Boolean is
   begin
      return Scope_Stack.Table (Scope_Stack.Last).In_Declarations;
   end In_Declarations;

   ----------------
   -- Open_Scope --
   ----------------

   procedure Open_Scope is
   begin
      Scope_Stack.Increment_Last;
      declare
	 SST : Scope_Stack_Entry renames
	   Scope_Stack.Table (Scope_Stack.Last);
      begin
	 SST.Extra_Scope_Id   := 0;
	 SST.In_Declarations  := True;
	 SST.Is_Extra_Scope   := False;
      end;
   end Open_Scope;

   ----------------------
   -- Open_Extra_Scope --
   ----------------------

   procedure Open_Extra_Scope is
   begin
      --  Check cases in which there is no need to create the extra scope

      if not Extra_Scopes_Allowed then
	 return;
      end if;

      Open_Scope;
      Scope_Stack.Table (Scope_Stack.Last).Is_Extra_Scope := True;
   end Open_Extra_Scope;

   -----------------------
   -- Set_In_Statements --
   ------------------------

   procedure Set_In_Statements is
   begin
      Scope_Stack.Table (Scope_Stack.Last).In_Declarations := False;
   end Set_In_Statements;

end Reflex.Expanders.Scopes_Stacks;

